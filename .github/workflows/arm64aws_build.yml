name: arm64aws_build

## self runner C++ build hosted on AWS Arm64
## see: https://github.com/marketplace/actions/build-c-project

on: [push]

jobs:
  project-build:
    runs-on: self-hosted # self-hosted runner on AWS

    steps:

    - name: 1. Show CPU architecture & optimize
      run: |
        # set huge pages to the number of cores
        sudo sysctl -w vm.nr_hugepages=$(nproc)

        # show architecture
        lscpu    `# show cpu`

        # add swap file
        hasswap=`sudo swapon --show`
        if [[ -z "$hasswap" ]]; then
          echo "** No swap space found, setting up swap directory."
          sudo fallocate -l 500M /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo sysctl vm.swappiness=10   `# set way below default 60, (avoid swap)`
        fi
        sudo swapon --show

    - name: 2. Checkout this branch of PocketMiner
      uses: actions/checkout@v2.0.0

    - name: 3. Apt install required libraries
      run: |
        sudo apt -y update
        sudo apt -y install libuv1-dev build-essential cmake libmicrohttpd-dev libssl-dev
        sudo apt -y install colorized-logs

    # cmake_build_action options at: https://github.com/marketplace/actions/build-c-project
    # replace this with a manual cmake process which customizes the build
    - name: 4. Build binaries
      uses: nicledomaS/cmake_build_action@v1.4
      with:
        cmake_args: -DWITH_HWLOC=OFF;-DCMAKE_BUILD_TYPE=Release;-DXMRIG_DEPS=${{github.workspace}}/xmrig-deps/gcc/x64/include;-DWITH_CN_LITE=OFF;-DWITH_CN_HEAVY=OFF;-DWITH_CN_PICO=OFF;-DWITH_CN_FEMTO=OFF;-DWITH_RANDOMX=OFF;-DWITH_ARGON2=ON;-DWITH_KAWPOW=OFF;-DWITH_SECURE_JIT=ON;-DARM_TARGET=8;-DWITH_HTTP=OFF;-DWITH_ASM=OFF;-DWITH_OPENCL=OFF;-DWITH_CUDA=OFF;-DWITH_NVML=OFF;-DWITH_MSR=OFF;-DWITH_ADL=OFF;-DWITH_PROFILING=OFF;-DWITH_SSE4_1=OFF;-DWITH_BENCHMARK=OFF;-DWITH_DMI=OFF;-DWITH_EMBEDDED_CONFIG=ON
        submodule_update: ON

    - name: 5. Gather binaries & get binary size
      run: |
        cd ${{github.workspace}}/build/ && mkdir binaries/
        mv xmrig* binaries/ && cd binaries && ls -la
        echo "build_size=`du -sh xmrigMiner | sed 's/xmrigMiner//'`" >> $GITHUB_ENV

    - name: 6. Run xmrigMiner for 1 minute to see if it works
      run: |
        cd ${{github.workspace}}/build/binaries/
        sudo chmod +x ./xmrigMiner

        # xmrig configuration
        CONFIG=' -o us.dero.herominers.com:1117 -u dERoQY3fRgQfG2HpErJ3R4YYBx4aPKF19LT5EnzVsTNZZDPFRvNz9VWG7owvJUiGqWjZ1btyDPT6DcgC4QKAQGsg9qWePwEsRc.20000 --tls -k --coin dero -a astrobwt --astrobwt-max-size=700 --astrobwt-avx2 --pause-on-battery --argon2-impl=AVX2 --huge-pages=TRUE --huge-pages-jit=TRUE --asm=auto --cpu-memory-pool=-1 --cpu-no-yield --print-time=8 --retry-pause=2'

        # ./xmrigMiner: unrecognized option '--pause-on-battery' (6.3.1+)
        # ./xmrigMiner: unrecognized option '--huge-pages=true'
        # ./xmrigMiner: unrecognized option '--huge-pages-jit=TRUE'

        # run for 1 minute and output to file, capturing timeout error
        sudo timeout 1m ./xmrigMiner $CONFIG --daemonized 2>&1 | tee output.txt
        # strip color from file contents
        cat output.txt | ansi2txt > output2.txt && mv -f output2.txt output.txt

        # and what is our hashrate? go through and get the fastest
        cp ${{github.workspace}}/bin/gethashrate.sh gethashrate.sh
        hashrate=`./gethashrate.sh`
        echo "hashrate=`./gethashrate.sh`" >> $GITHUB_ENV
        # hashrate=`grep "max" output.txt | tail -1` && hashrate=${hashrate##*max}
        if [[ -z "$hashrate" ]]; then
          echo "No hash activity found" && exit 1
        fi
        echo "Hashrate: `./gethashrate.sh`"

        # clean up files from binary archive
        rm output.txt && rm gethashrate.sh

    - name: 7. Upload binaries as zipped artifact
      id: xmrigcc-binaries
      uses: actions/upload-artifact@v1
      with:
        name: binaries
        path: ${{github.workspace}}/build/binaries

    - name: 8. Create a release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: true
        prerelease: false
        release_name: "#${{ github.run_number }} - ${{ env.build_size }}"
        tag_name: ${{ github.run_number }}
        body: |
          Release: ${{ github.event.head_commit.message }}
          - hashrate: ${{ env.hashrate }}
          - size: ${{ env.build_size }}

      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: 9. Upload release artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{github.workspace}}/build/binaries/xmrigMiner
        asset_name: xmrigMiner
        asset_content_type: application/x-executable




